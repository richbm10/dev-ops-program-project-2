# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
    description: "Prints the CircleCI Workflow ID"
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID
  destroy_environment:
     steps:
       - run:
           name: Destroy environment
           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
           command: |
             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - print_pipeline_id
      - run:
          name: "Output hello world to file"
          command: echo "Hello World!" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
      - run:
          name: "Failed to persist workspace output file"
          command: echo "Failed to persist output.txt"
          when: on_fail
  
  create_infrastructure:
    docker:
    # For using the aws cli we need to add the profile credentials as env variables in circleci
      - image: amazon/aws-cli 
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
                --region us-east-1
      - run: return 1
      - destroy_environment when: on_fail

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          # Fingerprint of additional ssh key added in circleci so that ansible can authenticate with the remote host
          fingerprints: [
              "86:d4:03:4e:86:b1:24:05:2f:2c:f4:9a:3a:b6:54:1c",
            ]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible #install the dependencies needed for your playbook
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/main-remote.yml

  print_output_file:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: "Prints the contents of output.txt"
          command: cat ~/output.txt

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  project-2-workflow:
    jobs:
      - create_infrastructure
      # - configure_infrastructure
      # - save_hello_world_output
      # - print_output_file:
      #     requires: [save_hello_world_output]
      # - smoke_test
